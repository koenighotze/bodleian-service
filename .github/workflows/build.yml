name: Build main

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

env:
  CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  security-scan-code:
    runs-on: ubuntu-20.04
    steps:
      - name: Checking out
        uses: actions/checkout@v3
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@0.3.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.8.0
        with:
          scan-type: "fs"
          ignore-unfixed: false
          format: "table"
          exit-code: "1"
          severity: "CRITICAL"

  qa:
    runs-on: ubuntu-20.04
    steps:
      - name: Checking out
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "^1.17.0"
      - name: Lint Go code
        uses: golangci/golangci-lint-action@v3
      - name: Vet Go code
        run: go vet
      - name: Checking Dockerfile
        uses: hadolint/hadolint-action@v2.1.0
        with:
          verbose: true
      - name: Check shell scripts
        uses: ludeeus/action-shellcheck@1.1.0
        with:
          severity: warning
          scandir: './scripts'

  test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checking out
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "^1.17.0"
      - name: Install dependencies
        run: go mod download
      - name: Testing
        run: go test -coverprofile=coverage.out ./...
      - name: Uploading coverage
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report --force-coverage-parser go -r coverage.out
        env:
          CODACY_PROJECT_NAME: bodleian-service
          CODACY_ORGANIZATION_PROVIDER: gh
          CODACY_USERNAME: ${{ github.repository_owner }}
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}

  build-container:
    needs:
      - qa
      - test
      - security-scan-code

    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-20.04

    steps:
      - name: Checking out
        uses: actions/checkout@v3
      - name: Authenticating
        uses: google-github-actions/auth@v1
        id: auth
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.CICD_SA_EMAIL_ADDRESS }}
          token_format: id_token
          id_token_audience: ${{ secrets.CLOUD_RUN_BACKEND_URL }}
          id_token_include_email: true
      - name: Setting up GCP environment
        uses: google-github-actions/setup-gcloud@v1
      - name: Setting up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Containerizing
        id: containerizing
        run: ./scripts/containerize.sh
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.8.0
        with:
          image-ref: ${{ env.image-name }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
      - name: Pushing image
        id: push
        run: ./scripts/containerize.sh
        env:
          OUTPUT_MODE: push
      - name: Deploying to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0.10.1
        with:
          image: ${{ env.image-name }}
          service: ${{ secrets.CLOUD_RUN_SERVICE }}
          region: ${{ secrets.CLOUD_RUN_REGION }}
          timeout: 30 # allow enough time to startup container
          no_traffic: true
          tag: main-latest
      - name: Testing if service is up
        run: |
          ./scripts/is-service-up.sh
        env:
          BASE_URL: ${{ steps.deploy.outputs.url }}
          BEARER_TOKEN: ${{ steps.auth.outputs.id_token }}



# Cannot do this because url contains a 'secret'
#    outputs:
#      service_url: ${{ steps.deploy.outputs.url }}

#      - name: Run API tests
#        uses: matt-ball/newman-action@v1.0.4
#        with:
##          apiKey: ${{ secrets.postmanApiKey }}
#          collection: Bodleian.postman_collection.json
##          environment: 5922408-228c7edd-fc15-4f68-9665-a35d7df6945b


